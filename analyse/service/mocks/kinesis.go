// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go-v2/service/kinesis (interfaces: SubscribeToShardEventStreamReader)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/kinesis/types"
	gomock "github.com/golang/mock/gomock"
)

// MockSubscribeToShardEventStreamReader is a mock of SubscribeToShardEventStreamReader interface.
type MockSubscribeToShardEventStreamReader struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribeToShardEventStreamReaderMockRecorder
}

// MockSubscribeToShardEventStreamReaderMockRecorder is the mock recorder for MockSubscribeToShardEventStreamReader.
type MockSubscribeToShardEventStreamReaderMockRecorder struct {
	mock *MockSubscribeToShardEventStreamReader
}

// NewMockSubscribeToShardEventStreamReader creates a new mock instance.
func NewMockSubscribeToShardEventStreamReader(ctrl *gomock.Controller) *MockSubscribeToShardEventStreamReader {
	mock := &MockSubscribeToShardEventStreamReader{ctrl: ctrl}
	mock.recorder = &MockSubscribeToShardEventStreamReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribeToShardEventStreamReader) EXPECT() *MockSubscribeToShardEventStreamReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSubscribeToShardEventStreamReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSubscribeToShardEventStreamReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubscribeToShardEventStreamReader)(nil).Close))
}

// Err mocks base method.
func (m *MockSubscribeToShardEventStreamReader) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockSubscribeToShardEventStreamReaderMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSubscribeToShardEventStreamReader)(nil).Err))
}

// Events mocks base method.
func (m *MockSubscribeToShardEventStreamReader) Events() <-chan types.SubscribeToShardEventStream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events")
	ret0, _ := ret[0].(<-chan types.SubscribeToShardEventStream)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockSubscribeToShardEventStreamReaderMockRecorder) Events() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockSubscribeToShardEventStreamReader)(nil).Events))
}
